from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.http import JsonResponse
from django.shortcuts import redirect, get_object_or_404
from django.views.generic import ListView, DetailView, CreateView, UpdateView, View
from taggit.models import Tag

from apps.blog.forms import PostForm, PostUpdateForm, CommentForm
from apps.blog.models import Post, Category, Comment, Rating
from apps.services.mixins import AuthorRequiredMixin


class PostListView(ListView):
    model = Post
    template_name = 'blog/post_list.html'
    context_object_name = 'posts'
    paginate_by = 2
    queryset = Post.custom.all()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
        return context
    # pagination get_elided... –¥–æ–±–∞–≤–∏—Ç—å


class PostDetailView(DetailView):
    model = Post
    template_name = 'blog/post_detail.html'
    context_object_name = 'post'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = self.object.title  # –æ–±—ä–µ–∫—Ç –≤—ã–∑—ã–≤–∞–µ–º—ã–π PostDetail
        context['form'] = CommentForm()
        return context


class PostFromCategoryView(ListView):
    template_name = 'blog/post_list.html'
    context_object_name = 'posts'
    category = None
    paginate_by = 2

    def get_queryset(self):
        self.category = Category.objects.get(slug=self.kwargs['slug'])
        queryset = Post.objects.filter(category__slug=self.category.slug)
        if not queryset:
            sub_category = Category.objects.filter(parent=self.category)
            queryset = Post.objects.filter(category__in=sub_category)
            # –¥–æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ—Å—Ç—ã
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = self.category.title
        return context


class CreatePostView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    template_name = 'blog/post_create.html'
    form_class = PostForm
    model = Post
    login_url = 'blog:post_list'
    success_message = '–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å–∞–π—Ç'
        return context

    def form_valid(self, form):
        form.instance.author = self.request.user
        form.save()
        return super().form_valid(form)


class PostUpdateView(AuthorRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Post
    form_class = PostUpdateForm
    template_name = 'blog/post_update.html'
    context_object_name = 'post'
    success_message = '–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞–≤–ª–µ–Ω–∞'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {self.object.title}'
        return context

    def form_valid(self, form):
        form.instance.author = self.request.user
        form.save()
        return super().form_valid(form)


class CommentCreateView(CreateView):
    form_class = CommentForm
    model = Comment

    def dispatch(self, request, *args, **kwargs):
        print(f"üîπ {request.user} –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ {request.path}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return super().dispatch(request, *args, **kwargs)

    def is_ajax(self):
        return self.request.headers.get('X-Requested-With') == 'XMLHttpRequest'

    def form_invalid(self, form):
        if self.is_ajax():
            return JsonResponse({'error': form.errors}, status=400)
        return super().form_invalid(form)

    def form_valid(self, form):

        if not self.is_ajax():
            print("–ó–∞–ø—Ä–æ—Å –ù–ï AJAX! –†–µ–¥–∏—Ä–µ–∫—Ç...")
            return redirect('blog:post_detail', pk=self.kwargs.get('pk'))

        comment = form.save(commit=False)
        comment.post_id = self.kwargs.get('pk')
        comment.author = self.request.user
        comment.parent_id = form.cleaned_data.get('parent')
        print(f"–°–æ–∑–¥–∞—ë—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.request.user}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"ID –ø–æ—Å—Ç–∞: {self.kwargs.get('pk')}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç: {form.cleaned_data.get('parent')}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        comment.save()

        if self.is_ajax():
            return JsonResponse({
                'is_child': comment.is_child_node(),
                'id': comment.id,
                'author': comment.author.username,
                'parent': comment.parent_id,
                'time_create': comment.time_create.strftime('%Y-%m-%d %H:%M:%S'),
                'avatar': comment.author.profile.avatar.url,
                'content': comment.content,
                'get_absolute_url': comment.author.profile.get_absolute_url(),
            }, status=200)
        return redirect(comment.post.get_absolute_url())

    def handle_no_permission(self):
        print(f" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.request.user} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {self.request.path}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return JsonResponse({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}, status=403)


class PostByTagListView(ListView):
    template_name = 'blog/post_list.html'
    model = Post
    context_object_name = 'posts'
    paginate_by = 2
    tag = None

    def get_queryset(self):
        self.tag = get_object_or_404(Tag, slug=self.kwargs['tag'])
        queryset = self.model.custom.filter(tags__slug=self.tag.slug)
        return queryset  # –ø–æ—Å–º–æ—Ä–µ—Ç—å –ø–æ—á–µ–º—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø–æ—Å—Ç –∞–∂ 18 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–¥

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = f'–°—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–≥—É {self.tag.name}'
        return context


class RatingCreateView(View):
    model = Rating

    def post(self, request, *args, **kwargs):
        post_id = request.POST.get('post_id')
        rating_value = int(request.POST.get('value'))
        forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if forwarded_for:
            ip_address = forwarded_for.split(',')[0]
        else:
            ip_address = request.META.get('REMOTE_ADDR')
        user = request.user if request.user.is_authenticated else None

        rating, created = self.model.objects.get_or_create(
            post_id=post_id,
            ip_address=ip_address,
            defaults={'user': user, 'value': rating_value}
        )

        if not created:
            if rating.value == rating_value:  # —Ç–∏–ø–æ –æ–Ω –Ω–∞–∂–∞–ª —Ç—É–¥–∞ –∂–µ, –≥–¥–µ —É–∂–µ —Å—Ç–æ—è–ª–∞ –æ—Ü–µ–Ω–∫–∞, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ—Ç
                rating.delete()
            else:
                rating.value = rating_value  # –ø–æ–º–µ–Ω—è–ª  —Å –ª–∞–π–∫–∞ –Ω–∞ –¥–∏–∑–ª–∞–π–∫
                rating.user = user  # –ª–∞–π–∫–∏ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ, —ç—Ç–æ –ø–æ–ª–µ –∏ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –∞ –≤–¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∞–ª—Å—è
                rating.save()
        return JsonResponse({'rating_sum': rating.post.get_sum_rating()})
